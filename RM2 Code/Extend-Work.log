
  ___  ____  ____  ____  ____ ®
 /__    /   ____/   /   ____/      Stata 18.0
___/   /   /___/   /   /___/       BE—Basic Edition

 Statistics and Data Science       Copyright 1985-2023 StataCorp LLC
                                   StataCorp
                                   4905 Lakeway Drive
                                   College Station, Texas 77845 USA
                                   800-782-8272        https://www.stata.com
                                   979-696-4600        service@stata.com

Stata license: Single-user  perpetual
Serial number: 301806304604
  Licensed to: tate
               UGA

Notes:
      1. Stata is running in batch mode.
      2. Unicode is supported; see help unicode_advice.

. do Extend-Work.do 

. /*********************************
> * Tate Mason                     *
> * UNC Charlotte                  *
> * Extend-Work.do                 *
> *********************************/
. 
. /********************************
> * 1. Environment Setup          *
> ********************************/
.         #delimit cr
delimiter now cr
.         clear

.         clear all

.         set more off

.         cap log close

.         
.         //Data Paths
.         
.   local data "/Volumes/TD1/mason/housing/RM2-Data"

.         local output "/Volumes/TD1/mason/housing/output/"

.         
.         log using `output'/RM2_output.txt, replace
-----------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /Volumes/TD1/mason/housing/output//RM2_output.txt
  log type:  smcl
 opened on:   8 Aug 2025, 17:06:42

.         
.         local prepRaw = 0

.         local prepDec = 0

.         local prepDummies = 0

.         local prepDecDummies = 0

.         local gapReg = 0

.         local doGraph = 1

.         local gapGraph = 1

.         local tabReg = 1

.         local bwReg     = 1

.         
. /********************************
> * 2. Data Setup (Percentiles)   *
> ********************************/
.         if `prepRaw' {
.                         
.                         use "`data'/IPUMS-USA_Extension-correct.dta", clear
.                         
.                         keep if inlist(year,1980,1990,2000,2010,2019)
.                 
.                         gen rent_inc = 100*rentgrs/(inctot/12) if inctot>0
.                         gen hval_inc = valueh/(inctot/12) if inctot>0
.                         
.                         
.                         gen inc_month = inctot/12
.                         gen own100 = 100*(1-renter)
.                         
.                         //compute percentiles
.                         local vars "rentgrs valueh own100 inc_month"
.                         
.                         levelsof year, local(years)
.                         
.                         foreach v of local vars {
  2.                                 di "computing percentiles for `v'..."
  3.                                 gen pctr_`v'=.
  4.                                 foreach y of local years {
  5.                                         di "    year=`y'..."
  6.                                         xtile pctr_`v'_`y' = `v' [aw=hhwt] if year==
> `y', nq(100)
  7.                                         replace pctr_`v'=pctr_`v'_`y' if year==`y'
  8.                                 }
  9.                                 
.                                 
.                         }
.                         
.                 
.                         
.                         save "`data'/fig2data.dta", replace
.                 
.                 }

. /********************************
> * 2. Data Setup (Deciles)       *
> ********************************/
.         if `prepDec' {
.                 
.                 use "`data'/IPUMS-USA_Extension-correct.dta", clear
.                         
.                         keep if inlist(year,1980,1990,2000,2010,2019)
.                         
.                         
.                 
.                         gen rent_inc = 100*rentgrs/(inctot/12) if inctot>0
.                         gen hval_inc = valueh/(inctot/12) if inctot>0
.                         
.                         
.                         gen inc_month = inctot/12
.                         gen own100 = 100*(1-renter)
.                 
.                         //compute deciles       
.                         local vars "rentgrs valueh own100 inc_month"
.                         
.                         levelsof year, local(years)
.                         
.                         foreach v of local vars {
  2.                                 di "computing deciles for `v'..."
  3.                                 gen dec_`v'=.
  4.                                 foreach y of local years {
  5.                                         di "    year=`y'..."
  6.                                         xtile dec_`v'_`y' = `v' [aw=hhwt] if year==`
> y', nq(10)
  7.                                         replace dec_`v'=dec_`v'_`y' if year==`y'
  8.                                 }
  9.                                 
.                                 
.                         }
.                         
.                         
.                         save "`data'/tab1data.dta", replace
.         }

. /********************************
> * 3. Prep Dummies (Percentiles) *
> ********************************/               
.                 
. if `prepDummies' {
.                 
.                 use "`data'/fig2data.dta", clear
.                 
.                 
.                 local races "asian chinese japanese korean vietnamese filipino indian b
> lack"
.                         levelsof pctr_inc_month, local(ps)
.                         foreach p of local ps {
  2.                                  
.                                 di "p=`p'"
  3.                                 //generate dummy for income ranks
.                                         gen _incr_p`p' = 0 if pctr_inc_month!=.
  4.                                         replace _incr_p`p' = 1 if pctr_inc_month==`p
> '
  5.                                 foreach r of local races {
  6.                                         di "race=`r'..."
  7.                                 //generate interaction with race
.                                         gen _ia_`r'_incr_p`p' = `r'*_incr_p`p'
  8.                                 
.                                 
.                                 }
  9.                 
.                         }
.                         
.                         
.                         save "`data'/fig2_reg_data.dta", replace
.                         
.                 }

. /********************************
> * 3. Prep Dummies (Deciles)     *
> ********************************/               
.                 
. if `prepDecDummies' {
.                 
.                 use "`data'/tab1data.dta", clear
.                 
.                         local races "asian chinese japanese korean vietnamese filipino 
> indian black"
.                 
.                         levelsof dec_inc_month, local(ds)
.                         foreach d of local ds {
  2.                                  
.                                 di "d=`d'"
  3.                                 //generate dummy for income ranks
.                                         gen _incr_d`d' = 0 if dec_inc_month!=.
  4.                                         replace _incr_d`d' = 1 if dec_inc_month==`d'
  5.                                 foreach r of local races {
  6.                                         di "race =`r'"
  7.                                 //generate interaction with asian
.                                         gen _ia_`r'_incr_d`d' = `r'*_incr_d`d'
  8.                                 
.                                 }
  9.                         }
.                         
.                         
.                         save "`data'/tab1_reg_data.dta", replace
.                         
.                 }

.                 
. 
. /********************************
> * 4. Gap Regressions            *
> ********************************/
. if `gapReg'{
.                 use "`data'/fig2_reg_data.dta", clear
.                 local races "asian chinese japanese korean vietnamese filipino indian b
> lack"
.                 foreach r of local races {
  2.                 //create interactions
.                         gen _ia_`r'_y = `r'*pctr_inc_month
  3.                 
.                 //run regression for each year and outcome
.                         
.                         
.                         local vars "rentgrs valueh own100"
  4.                         local controls "educ age sex hhtype farm metarea statefip ci
> ty yrimmig"
  5.                         local years "1980,1990,2000,2010,2019"
  6.                         
.                         sum `controls'
  7.                 
.                         replace pctr_own100=own100 //this one is a linear probability m
> odel (no rank necessary)
  8.                         levelsof year, local(years) //grab available years
  9.                         foreach v of local vars {
 10.                                 gen `r'_rgap_`v'_p25=.
 11.                                 gen `r'_rgap_`v'_p50=.
 12.                                 gen `r'_rgap_`v'_p75=.
 13.                                 foreach y of local years {
 14.                         
.                                         //run parametric regression (linear in income r
> ank)
.                                                 reg pctr_`v' pctr_inc_month `r' _ia_`r'
> _y `controls' [aw=hhwt] if year==`y', 
 15.                                         
.                                         //predice race gap at various income ranks
.                                                 replace `r'_rgap_`v'_p25 = _b[`r'] + _b
> [_ia_`r'_y]*25 if year==`y'
 16.                                                 replace `r'_rgap_`v'_p50 = _b[`r'] +
>  _b[_ia_`r'_y]*50 if year==`y'
 17.                                                 replace `r'_rgap_`v'_p75 = _b[`r'] +
>  _b[_ia_`r'_y]*75 if year==`y'
 18.                                 }
 19.                                 
.                         }
 20.                 }
.                 save "`data'/graph_gap.dta", replace
.         }

. /********************************
> * 5. Graphing                   *
> ********************************/       
. if `doGraph' {
.         use "`data'/graph_gap.dta", clear
